---
title: "Tucson Car Collision Analysis"
subtitle: "INFO 526 - Project Final"
author: 
  - name: "Data Dazzlers: Sanja Dmitrovic, Jiayue He, Vidhyananth Sivashanmugam,Naitik Shah, Varun Soni, Mohammad Ali Farmani" 
    affiliations:
      - name: "School of Information, University of Arizona"
description: "Project description"
format:
   html:
    code-tools: true
    code-overflow: wrap
    embed-resources: true
editor: visual
execute:
  warning: false
  echo: false
---

```{r, warning=FALSE, message=FALSE}
#| label: load-pkgs
#| message: false
#| include: false 

if(!require(pacman))
  install.packages("pacman")

pacman::p_load(
  tidyverse,
  dlookr,
  kableExtra,
  reader,
  scales,
  gt,
  DT,
  janitor,
  stringer,
  leaflet,
  highcharter,
  waffle,
  htmlwidgets,
  palmerpenguins
  )

```

```{r}
#| label: setup
#| include: false

# Plot theme
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 11))

# For better figure resolution
knitr::opts_chunk$set(
  fig.retina = 3, 
  dpi = 300, 
  fig.width = 8, 
  fig.asp = 0.618 
  )

```

## Abstract

In this project, we look into the Tucson accident crash dataset. We aim to offer detailed insights into the frequency, severity, and causes of traffic accidents across different times and locations in Tucson. So as to help various stakeholders, such as city planners, policy-makers, local residents, and fellow students, to improve road safety.

## **Introduction**

In response to the critical issue of road safety in Tucson and as students at the University of Arizona, located in the heart of Tucson, we propose to develop a dynamic and user-friendly dashboard that offers detailed insights into the frequency, severity, and causes of traffic accidents across different times and locations in Tucson. We aspire to contribute to informed decision-making processes and the implementation of effective road safety measures.

Analyzing traffic collision data within the city not only allows us to apply the theoretical knowledge we've gained in our data analysis courses but also provides insights into urban safety and transportation issues that affect peers and fellow residents. This project is not just an academic exercise; it's a chance to contribute to a safer, more informed Tucson.

The project utilizes the comprehensive accident crash data set provided by the Tucson Police Department, [GIS Data from the City of Tucson](https://gisdata.tucsonaz.gov/datasets/tucson-police-collisions/explore "Dataset link"), which displays Tucson Police's publicly-available records of vehicle collisions from March 2022 to the present. Variables in this dataset include date of collision, injury severity, manner of collision, if the collision was fatal, etc. A full list of these variables is provided below.

```{r}
#| label: load-data
#| message: false
#| echo: false
#| results: hide

boolan_tranform <- function(vector) {
  result <- ifelse(vector == 1, "Yes", "No")
  return(result)
}

cars_data <- read.csv("data/tucson_data.csv") |>
  clean_names() |>
  mutate(
    collision_date  = format(ymd_hms(collision_date), "%m/%d/%Y"), # Clean date type
    year = year_occu,
    month = month_abbr,
    hour = ifelse(time_occu == 0,"12:00 AM",
               ifelse(nchar(as.character(time_occu)) == 3,
                      paste0(substr(as.character(time_occu), 1, 1), ":", ... =
                               substr(as.character(time_occu), 2, 3), " AM"),
                      format(strptime(as.character(time_occu), 
                                      format = "%H%M", tz = "UTC"), 
                             format = "%I:%M %p"))),
    weekday = if_else(day %in% c("Saturday", "Sunday"), "Weekend", "Weekday"),
    offense_desc = if_else(str_detect(offense_desc, "^\\s*$"), "Unknown", offense_desc),
    offense_desc_main = str_split_fixed(offense_desc, ":", n = 2)[, 1],
    offense_desc_sub = if_else(str_detect(
                    str_split_fixed(offense_desc, ":", n = 2)[, 2], "^\\s*$"),
                    "Other", 
                    str_split_fixed(offense_desc, ":", n = 2)[, 2]),
    offense_type = case_when(
          str_detect(offense_desc_main, "Fatal") ~ "Fatal Accidents",
          str_detect(offense_desc_main, "Injury") ~ "Injury Accidents",
          str_detect(offense_desc_main, "Property Damage") ~ "Property Damage Accidents",
          str_detect(offense_desc_main, "Driving Under the Influence") ~ "DUI Accidents",
          str_detect(offense_desc_main, "Non-Traffic") ~ "Non-Traffic Accidents",
          str_detect(offense_desc_main, "Other") ~ "Other Vehicle Accidents",
          TRUE ~ "Miscellaneous Accidents"
          ),
    collision_type = if_else(str_detect(collision_type, "^\\s*$"),
                             "Unknown", collision_type),
    in_out_vehicle = case_when(
      grepl("Pedestrian|Bicycle|Parked_Unit|Single Pedestrian", 
          collision_type, ignore.case = TRUE) ~ "Out of Vehicle",
      grepl("Vehicle|Motorcycle|Bus|Train", 
            collision_type, ignore.case = TRUE) ~ "In Vehicle",
    TRUE ~ "Unknown"),
    distance = if_else(str_detect(distance, "^\\s*$"), "Unknown", distance),
    traffic_control_device = boolan_tranform(traffic_control_device),
    work_zone = boolan_tranform(work_zone),
    violation_too_close = boolan_tranform(violation_too_close),
    violation_traffic_control_device = boolan_tranform(violation_traffic_control_device),
    violation_turning = boolan_tranform(violation_turning),
    violation_wrong_way = boolan_tranform(violation_wrong_way),
    violation_lane = boolan_tranform(violation_lane),
    violation_crosswalk = boolan_tranform(violation_crosswalk),
    violation_failure_to_yield = boolan_tranform(violation_failure_to_yield),
    violation_aggressive_driving = boolan_tranform(violation_aggressive_driving),
    collision_neighborhd = if_else(str_detect(collision_neighborhd, "^\\s*$"),
                                   "Uknw", collision_neighborhd), 
    collision_direction = if_else(str_detect(collision_direction, "^\\s*$"),
                                  "Unknown", collision_direction), 
    accident_location = if_else(str_detect(accident_location, "^\\s*$"),
                                "Unknown", accident_location)
    ) |>
  select(accident_id, collision_date, year, month, day, weekday, hour, time_occu,
         offense_desc_main, offense_desc_sub,offense_type, injury_severity,
         collision_type, collision_manner, division, distance, hitand_run,
         pedestrian, fatal_collision, intersection_related, traffic_control_device,
         work_zone, violation_speed, total_injuries, latitude, longitude, 
         violation_too_close, violation_traffic_control_device,violation_turning,
         violation_wrong_way, violation_lane, violation_crosswalk, ward,
         violation_failure_to_yield, violation_aggressive_driving, operator_impaired,
         operator_distracted, x_coordinate, y_coordinate, total_fatalities,
         collision_neighborhd, collision_direction, accident_location,
         intersection_related, in_out_vehicle) 

data("penguins")
```

## **Overall Project Plan**

In the progress of finishing the project, we follows steps including:

1.  Data Preparation and Analysis

2.  Development of Interactive Visualizations

3.  Accessibility and User Experience

4.  Outreach and Impact

## Project Questions

Specially, we focused on two main questions:

1.  Does day of the week and/or time of day affect severity and the number of accidents?
2.  What is the relationship between the type of violation (e.g., failure to yield, aggressive driving) and if the accident resulted in a fatality?

Some Required subsets: 

```{r}
#| label: overall-values
#| results: hide

n_accidents <- nrow(cars_data)
n_injuries <- sum(cars_data$total_injuries, na.rm = TRUE)
n_fatalities <- sum(cars_data$total_fatalities, na.rm = TRUE)
injury_rate <- nrow(cars_data |> filter(total_injuries > 0)) / n_accidents
fatal_rate <- nrow(cars_data |> filter(fatal_collision == "Yes")) / n_accidents

# pivot summary
summary_data_01 <- cars_data |>
  group_by(year) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE),
    injuries = sum(total_injuries, na.rm = TRUE),
    accidents = n()
  ) |>
  pivot_longer(
    cols = c(fatalities, injuries, accidents),
    names_to = "metric", 
    values_to = "count"
  )

summary_data_02 <- cars_data |>
  filter(fatal_collision == "Yes") |>
  group_by(division) |>
  summarise(count = n()) |>
  arrange(desc(count))

```

```{r}
#| label: traffic-collision-values
#| results: hide

# Calculate percentages by injury_severity
summary_data_03 <- cars_data |>
  group_by(injury_severity) |>
  summarise(total_count = n()) |>
  mutate(percentage = (total_count / sum(total_count)) * 100)

# Calculate percentages by injury_severity
summary_data_04 <- cars_data |>
  group_by(year) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE)
  )

```

```{r}
#| label: collision-manner
#| results: hide
#| 
summary_data_05 <- cars_data |>
  group_by(collision_manner) |>
  summarise(accidents = n(), .groups = "drop") |>
  mutate(collision_manner = stringr::str_wrap(collision_manner, width = 10),
         accidents = accidents/1000) |>
  arrange(desc(accidents)) |>
  filter(collision_manner!="")

```

```{r}
#| label: collision-location-values
#| results: hide

summary_data_06 <- cars_data |>
  group_by(division) |>
  summarise(total_count = n()) |>
  mutate(percentage = (total_count / sum(total_count)) * 100) |>
  arrange(desc(total_count))
  
summary_data_07 <- cars_data |>
  group_by(ward) |>
  summarise(total_count = n()) |>
  mutate(percentage = (total_count / sum(total_count)) * 100) |>
  arrange(desc(total_count))

```

```{r}
#| label: collision-occurance-values
#| results: hide

summary_data_08 <- cars_data |>
  filter(year!=2017) |>
  group_by(year, month) |>
  summarise(accidents = n(), .groups = "drop") |>
  pivot_wider(
    names_from = year,
    values_from = accidents
  )

summary_data_09 <- cars_data |>
  filter(year != 2017, !is.na(time_occu)) |>  # Filter out 2017 and NA in time
  group_by(day, time_occu) |>
  summarise(accidents = n(), .groups = "drop")  |>
  mutate(
    time_occu = as.character(time_occu),
    time_occu = str_pad(time_occu, width = 4, pad = "0"),
    hour = as.numeric(time_occu) / 100,
    day_index = as.numeric(factor(day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))) - 1
  ) |>
  filter(!is.na(hour))

```

```{r}
#| label: collision Type and Injury Serverity
#| results: hide

summary_data_10 <- cars_data |>
  group_by(collision_manner,injury_severity ) |>
  summarise(accidents = n(), total_count = n(), .groups = "drop") |>
  mutate(percentage = (total_count / sum(total_count)) * 100)|>
arrange(desc(accidents)) |>
  filter(collision_manner!="")
summary_data_10
```



### Question 1

Does day of the week and/or time of day affect severity and the number of accidents?

Approach: We use a heat map to see at which times there are more accidents happens in a day. We use a line plot to review the monthly accident condition in different years. 

```{r}
#| title: Collision by Day and Hour
# Define colors for the heatmap
colors <- c("#FFFFFF", "#3070B3", "#FFA07A", "#FF4500")

# Create the heatmap
highchart() |>
  hc_chart(type = "heatmap", zoomType = "xy") |>
  hc_xAxis(categories = formatC(0:23, width = 2, format = "d", flag = "0"), title = NULL) |>
  hc_yAxis(categories = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"), title = NULL, reversed = TRUE) |>
  hc_colorAxis(min = 0, stops = color_stops(colors = colors)) |>
  hc_legend(align = "right", layout = "vertical", margin = 0, verticalAlign = "top", y = 25, symbolHeight = 280) |>
  hc_add_series(
    data = summary_data_09 |> 
      mutate(x = hour, y = day_index, value = accidents) |> 
      select(x, y, value) |> 
      list_parse(),
    name = "Accidents",
    borderWidth = 0.5,
    borderColor = '#FFFFFF'
  ) |>
  hc_tooltip(
    useHTML = TRUE, 
    headerFormat = '<b>{series.xAxis.categories[point.x]}:00 - {series.yAxis.categories[point.y]}</b><br>',
    pointFormat = '<b>{point.value} accidents</b>'
  )
```

Analysis: Based on the plot, we found that during the week, time period from 13:30 to 18:30 more accident happens, one possible reason is that between this period of time, many parents would go out to pick up their children between 13:30 - 16:30. And during the period of 16:30 - 18:30 is the peak hour of people get off from the work. The second time period of more accident happens is between 6:30 to 8:30 which is also the peak hour when people go to the work. Therefore, drivers should be more careful during the peak hours, or if possible, people can also avoid getting out during the peak hours. 


```{r}
#| title: Accidents Over Time

months_ordered <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")

# Ensure that the month column is a factor with levels in the correct order
summary_data_08$month <- factor(summary_data_08$month, levels = months_ordered)

# Sort the data frame by month
summary_data_08 <- summary_data_08[order(summary_data_08$month), ]

# Now create the highchart object as before, it should now have the x-axis in the correct order
month_chart <- highchart() |>
  hc_chart(type = "line") |>
  hc_title(text = "") |>
  hc_xAxis(categories = months_ordered) |>
  hc_yAxis(title = list(text = "Accidents"))


# Add series for each year
for (i in 2:ncol(summary_data_08)) {  # Start from the second column, assuming the first column is `month`
  month_chart <- month_chart |> hc_add_series(
    name = names(summary_data_08)[i],  # Use the column name as the series name
    data = summary_data_08[[i]],  # Use the column data as series data
    dashStyle = "Dash"  # Set the line style to dashed
  )
}

# Print the chart
month_chart

```

Analysis: Based on the line plot, we noticed that on average, Jun and July have comparatively lowest accident rate, while more accidents happen in Oct and Apr. Probably it is because of the holiday as Halloween and Spring Break of some Universities. We also noticed that in 2020, Apr had the lowest accident rate, we conclude it is due to that Apr 2020 was the first "shutdown" month during COVID-19 in the USA. 

### Question 2

What is the relationship between the type of violation (e.g., failure to yield, aggressive driving) and if the accident resulted in a fatality?

Approach: We use a heat map to see the relationship between the type of violation and the resulted injure inclduing the fatality injury. 

```{r}

#| title: Collision Type and Injury Serverity

# Filter out rows where collision_manner is 'Unknown' or 'Other'
summary_data_10 <- summary_data_10 %>%
  filter(!collision_manner %in% c("Unknown", "Other"))

# First, ensure that the 'collision_manner' and 'injury_severity' columns are factors and get their levels
summary_data_10$collision_manner <- factor(summary_data_10$collision_manner)
summary_data_10$injury_severity <- factor(summary_data_10$injury_severity, levels = c("No Injury", "Non-Incapacitating Injury", "Possible Injury", "Unknown Injury", "Incapacitating Injury", "Fatal Injury"))


# Define colors for the heatmap
colors <- c("#FFFFFF", "#3070B3", "#FFA07A", "#FF4500")


# Prepare the data for the heatmap
heatmap_data <- summary_data_10 |>
  mutate(
    x = as.integer(collision_manner) - 1, # -1 because Highcharts is zero-indexed
    y = as.integer(injury_severity) - 1,
    value = total_count
  ) |>
  select(x, y, value) |>
  list_parse()

# Create the heatmap
highchart() |>
  hc_chart(type = "heatmap", zoomType = "xy") |>
  hc_title(text = "Collision Type and Injury Severity") |>
  hc_xAxis(categories = levels(summary_data_10$collision_manner)) |>
  hc_yAxis(categories = levels(summary_data_10$injury_severity), reversed = TRUE) |>
  hc_colorAxis(min = 0, stops = color_stops(colors = colors)) |>
  hc_legend(align = "right", layout = "vertical", margin = 0, verticalAlign = "top", y = 25, symbolHeight = 280) |>
  hc_add_series(
    data = heatmap_data,
    name = "Accidents",
    borderWidth = 0.5,
    borderColor = '#FFFFFF'
  ) |>
  hc_tooltip(
    useHTML = TRUE, 
    headerFormat = '<b>{point.x} - {point.y}</b><br>',
    pointFormat = '<b>{point.value} accidents</b>'
  )

```

Analysis: Based on the plot, we found that the manner: Left Turn caused the most accidents including the highest fatal injury. Usually left turn is allowed during the green light which also allows straight car across, so many people who turned left might neglect the coming cars. It suggested that when drivers turn left, they should be more careful. 


## **Conclusion**

With a deep commitment to applying our analytical skills for the betterment of our community, we believe that this project represents a meaningful opportunity to make a tangible difference in the area of road safety in Tucson. We are excited about the potential of our interactive spatiotemporal visualization tool to illuminate insights that can lead to positive changes in our community.
