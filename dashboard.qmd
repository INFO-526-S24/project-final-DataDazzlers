---
format: dashboard
editor_options: 
  chunk_output_type: console
execute:
  echo: false
---

```{r}
#| label: load-packages
#| message: false

pacman::p_load(
  tidyverse,
  dlookr,
  kableExtra,
  reader,
  scales,
  gt,
  DT,
  janitor,
  stringr,
  leaflet,
  highcharter,
  htmlwidgets,
  osrm
  )

```

```{r}
#| label: load-data
#| message: false
#| echo: false
#| results: hide

boolan_tranform <- function(vector) {
  result <- ifelse(vector == 1, "Yes", "No")
  return(result)
}

# read data
cars_data <- read.csv("data/tucson_data.csv") |>
  clean_names() |>
  mutate(
    collision_date  = format(ymd_hms(collision_date), "%m/%d/%Y"), # Clean date type
    year = year_occu,
    month = as.factor(month_abbr),
    month_no = as.factor(month_occu),
    day  = as.factor(day),
    hour = ifelse(time_occu == 0,"12:00 AM",
               ifelse(nchar(as.character(time_occu)) == 3,
                      paste0(substr(as.character(time_occu), 1, 1), ":", ... =
                               substr(as.character(time_occu), 2, 3), " AM"),
                      format(strptime(as.character(time_occu), 
                                      format = "%H%M", tz = "UTC"), 
                             format = "%I:%M %p"))),
    weekday = if_else(day %in% c("Saturday", "Sunday"), "Weekend", "Weekday"),
    offense_desc = if_else(str_detect(offense_desc, "^\\s*$"), "Unknown", offense_desc),
    offense_desc_main = str_split_fixed(offense_desc, ":", n = 2)[, 1],
    offense_desc_sub = if_else(str_detect(
                    str_split_fixed(offense_desc, ":", n = 2)[, 2], "^\\s*$"),
                    "Other", 
                    str_split_fixed(offense_desc, ":", n = 2)[, 2]),
    offense_type = as.factor(case_when(
          str_detect(offense_desc_main, "Fatal") ~ "Fatal Accidents",
          str_detect(offense_desc_main, "Injury") ~ "Injury Accidents",
          str_detect(offense_desc_main, "Property Damage") ~ "Property Damage Accidents",
          str_detect(offense_desc_main, "Driving Under the Influence") ~ "DUI Accidents",
          str_detect(offense_desc_main, "Non-Traffic") ~ "Non-Traffic Accidents",
          str_detect(offense_desc_main, "Other") ~ "Other Vehicle Accidents",
          TRUE ~ "Miscellaneous Accidents"
          )),
    collision_manner = as.factor(gsub("Rear End", "Rear-End",collision_manner)),
    collision_type = as.factor(if_else(str_detect(collision_type, "^\\s*$"),
                             "Unknown", collision_type)),
    in_out_vehicle = as.factor(case_when(
      grepl("Pedestrian|Bicycle|Parked_Unit|Single Pedestrian", 
          collision_type, ignore.case = TRUE) ~ "Out of Vehicle",
      grepl("Vehicle|Motorcycle|Bus|Train", 
            collision_type, ignore.case = TRUE) ~ "In Vehicle",
    TRUE ~ "Unknown")),
    distance = if_else(str_detect(distance, "^\\s*$"), "Unknown", distance),
    traffic_control_device = boolan_tranform(traffic_control_device),
    work_zone = boolan_tranform(work_zone),
    violation_too_close = boolan_tranform(violation_too_close),
    violation_traffic_control_device = boolan_tranform(violation_traffic_control_device),
    violation_turning = boolan_tranform(violation_turning),
    violation_wrong_way = boolan_tranform(violation_wrong_way),
    violation_lane = boolan_tranform(violation_lane),
    violation_crosswalk = boolan_tranform(violation_crosswalk),
    violation_failure_to_yield = boolan_tranform(violation_failure_to_yield),
    violation_aggressive_driving = boolan_tranform(violation_aggressive_driving),
    collision_neighborhd = if_else(str_detect(collision_neighborhd, "^\\s*$"),
                                   "Uknw", collision_neighborhd), 
    collision_direction = if_else(str_detect(collision_direction, "^\\s*$"),
                                  "Unknown", collision_direction), 
    accident_location = if_else(str_detect(accident_location, "^\\s*$"),
                                "Unknown", accident_location),
    injury_severity <- as.factor(injury_severity),
    division <- as.factor(division)
    ) |>
  select(accident_id, collision_date, year, month, month_no, day, weekday, hour, time_occu,
         offense_desc_main, offense_desc_sub,offense_type, injury_severity,
         collision_type, collision_manner, division, distance, hitand_run,
         pedestrian, fatal_collision, intersection_related, traffic_control_device,
         work_zone, violation_speed, total_injuries, latitude, longitude, 
         violation_too_close, violation_traffic_control_device,violation_turning,
         violation_wrong_way, violation_lane, violation_crosswalk, ward,
         violation_failure_to_yield, violation_aggressive_driving, operator_impaired,
         operator_distracted, x_coordinate, y_coordinate, total_fatalities,
         collision_neighborhd, collision_direction, accident_location,
         intersection_related, in_out_vehicle) 

```


# Overall

```{r}
#| label: overall-values
#| results: hide

n_accidents <- nrow(cars_data)
n_hitandrun <- nrow(cars_data |> filter(hitand_run == "Yes"))
n_injuries <- sum(cars_data$total_injuries, na.rm = TRUE)
n_fatalities <- sum(cars_data$total_fatalities, na.rm = TRUE)
injury_rate <- nrow(cars_data |> filter(total_injuries > 0)) / n_accidents
fatal_rate <- nrow(cars_data |> filter(fatal_collision == "Yes")) / n_accidents

```

## Row {height="20%"}

```{r}
#| content: valuebox
#| title: "Total Collisions"

list(
  color = "#3498db",
  value = format(n_accidents, big.mark = ",") 
)
```

```{r}
#| content: valuebox
#| title: "Hit & Run Collisions"

list(
  color = "#3498db",
  value = format(n_hitandrun, big.mark = ",") 
)
```

```{r}
#| content: valuebox
#| title: "Total Injuries"

list(
  color = "#3498db",
  value = format(n_injuries, big.mark = ",")  
)
```

```{r}
#| content: valuebox
#| title: "Total Fatalities"

list(
  color = "#3498db",
  value = format(n_fatalities, big.mark = ",")  
)
```

```{r}
#| content: valuebox
#| title: "Injury Rate"

list(
  color = "#3498db",
  value = sprintf("%.2f%%", injury_rate * 100) 
)
```

```{r}
#| content: valuebox
#| title: "Fatality Rate"

list(
  color = "#3498db",
  value = sprintf("%.2f%%", fatal_rate * 100)  
)
```

## Row {height="80%"}

### Column {width="50%"} {.tabset}

```{r}
#| title: Collisions

cars_data |>
  filter(!year %in% c(2017, 2024)) |>
  group_by(year) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE),
    injuries = sum(total_injuries, na.rm = TRUE),
    accidents = n(),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = c(fatalities, injuries, accidents),
    names_to = "metric", 
    values_to = "count"
  ) |>
  hchart("line", hcaes(x = year, y = count, group = metric)) |>
  hc_title(text = "Yearly Collisions Trends",  align = "center") |>
  hc_xAxis(title = list(text = "Year"), labels = list(rotation = 0)) |>
  hc_yAxis(title = list(text = "Total Count")) |>
  hc_legend(
    enabled = TRUE,
    align = 'center',
    verticalAlign = 'bottom',
    layout = 'horizontal'
  ) |>
  hc_colors(c("#3498db", "#e74c3c", "#2ecc71")) |>
  hc_plotOptions(
    # Customizing line styles and markers
    series = list(lineWidth = 3,
                  marker = list(enabled = TRUE,  # Enable markers
                                fillColor = '#FFFFFF',  # White fill
                                lineWidth = 2,
                                lineColor = NULL))) |>
    hc_responsive(rules = list(list(condition = list(maxWidth = 500),
                                    chartOptions = list(legend = list(layout = 'horizontal',
                                                                      align = 'center',
                                                                      verticalAlign = 'bottom'))))) |>
    hc_add_theme(hc_theme_smpl()) |>
    hc_exporting(enabled = FALSE)  # Enable exporting if needed
```

```{r}
#| title: Hit & Run

cars_data |>
  filter(hitand_run=='Yes',
         !year %in% c(2017, 2024)) |>
  group_by(year) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE),
    injuries = sum(total_injuries, na.rm = TRUE),
    accidents = n(),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = c(fatalities, injuries, accidents),
    names_to = "metric", 
    values_to = "count"
  ) |>
  hchart("line", hcaes(x = year, y = count, group = metric)) |>
  hc_title(text = "Yearly Hit & Run Collisions Trends",  align = "center") |>
  hc_xAxis(title = list(text = "Year"), labels = list(rotation = 0)) |>
  hc_yAxis(title = list(text = "Total Count")) |>
  hc_legend(
    enabled = TRUE,
    align = 'center',
    verticalAlign = 'bottom',
    layout = 'horizontal'
  ) |>
  hc_colors(c("#3498db", "#e74c3c", "#2ecc71")) |>
  hc_plotOptions(
    # Customizing line styles and markers
    series = list(lineWidth = 3,
                  marker = list(enabled = TRUE,  # Enable markers
                                fillColor = '#FFFFFF',  # White fill
                                lineWidth = 2,
                                lineColor = NULL))) |>
    hc_responsive(rules = list(list(condition = list(maxWidth = 500),
                                    chartOptions = list(legend = list(layout = 'horizontal',
                                                                      align = 'center',
                                                                      verticalAlign = 'bottom'))))) |>
    hc_add_theme(hc_theme_smpl()) |>
    hc_exporting(enabled = FALSE)  # Enable exporting if needed
```

```{r}
#| title: Overspeed

cars_data |>
  filter(violation_speed=='Yes',
         !year %in% c(2017, 2024)) |>
  group_by(year) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE),
    injuries = sum(total_injuries, na.rm = TRUE),
    accidents = n(),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = c(fatalities, injuries, accidents),
    names_to = "metric", 
    values_to = "count"
  ) |>
  hchart("line", hcaes(x = year, y = count, group = metric)) |>
  hc_title(text = "Yearly Overspeed Collisions Trends",  align = "center") |>
  hc_xAxis(title = list(text = "Year"), labels = list(rotation = 0)) |>
  hc_yAxis(title = list(text = "Total Count")) |>
  hc_legend(
    enabled = TRUE,
    align = 'center',
    verticalAlign = 'bottom',
    layout = 'horizontal'
  ) |>
  hc_colors(c("#3498db", "#e74c3c", "#2ecc71")) |>
  hc_plotOptions(
    # Customizing line styles and markers
    series = list(lineWidth = 3,
                  marker = list(enabled = TRUE,  # Enable markers
                                fillColor = '#FFFFFF',  # White fill
                                lineWidth = 2,
                                lineColor = NULL))) |>
    hc_responsive(rules = list(list(condition = list(maxWidth = 500),
                                    chartOptions = list(legend = list(layout = 'horizontal',
                                                                      align = 'center',
                                                                      verticalAlign = 'bottom'))))) |>
    hc_add_theme(hc_theme_smpl()) |>
    hc_exporting(enabled = FALSE)  # Enable exporting if needed
```

```{r}
#| title: DUI

cars_data |>
  filter(offense_type=="DUI Accidents",
         !year %in% c(2017, 2024)) |>
  group_by(year) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE),
    injuries = sum(total_injuries, na.rm = TRUE),
    accidents = n(),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = c(fatalities, injuries, accidents),
    names_to = "metric", 
    values_to = "count"
  ) |>
  hchart("line", hcaes(x = year, y = count, group = metric)) |>
  hc_title(text = "Yearly Driving Under Influence Collisions Trends",  align = "center") |>
  hc_xAxis(title = list(text = "Year"), labels = list(rotation = 0)) |>
  hc_yAxis(title = list(text = "Total Count")) |>
  hc_legend(
    enabled = TRUE,
    align = 'center',
    verticalAlign = 'bottom',
    layout = 'horizontal'
  ) |>
  hc_colors(c("#3498db", "#e74c3c", "#2ecc71")) |>
  hc_plotOptions(
    # Customizing line styles and markers
    series = list(lineWidth = 3,
                  marker = list(enabled = TRUE,  # Enable markers
                                fillColor = '#FFFFFF',  # White fill
                                lineWidth = 2,
                                lineColor = NULL))) |>
    hc_responsive(rules = list(list(condition = list(maxWidth = 500),
                                    chartOptions = list(legend = list(layout = 'horizontal',
                                                                      align = 'center',
                                                                      verticalAlign = 'bottom'))))) |>
    hc_add_theme(hc_theme_smpl()) |>
    hc_exporting(enabled = FALSE)  # Enable exporting if needed

```

### Column {width="30%"} {.tabset}

```{r}
#| title: Collisions

cars_data |>
  group_by(offense_type) |>
  summarise(count = n(), .groups = "drop") |>
  arrange(desc(count)) |>
  hchart("column", hcaes(x = offense_type, y = count)) |>
  hc_chart(inverted = TRUE) |>
  hc_title(text = "Collisions by Offense Type",  align = "center") |>
   hc_xAxis(title = NULL, labels = list(enabled = TRUE)) |>
  hc_yAxis(title = list(text = "Collisions")) |>
  hc_plotOptions(column = list(dataLabels = list(enabled = TRUE, formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }")),
                               color = "#3498db")) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_legend(enabled = FALSE)

```

```{r}
#| title: Injuries
 
cars_data |>
  group_by(offense_type) |>
  summarise(injuries = sum(total_injuries, na.rm = TRUE), .groups = "drop") |>
  arrange(desc(injuries)) |>
  hchart("column", hcaes(x = offense_type, y = injuries)) |>
  hc_title(text = "Injuries by Offense Type",  align = "center") |>
  hc_chart(inverted = TRUE) |>
   hc_xAxis(title = NULL, labels = list(enabled = TRUE)) |>
  hc_yAxis(title = list(text = "Injuries")) |>
  hc_plotOptions(column = list(dataLabels = list(enabled = TRUE, formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }")),
                               color = "#2ecc71")) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_legend(enabled = FALSE)

```

```{r}
#| title: Fatalities
 
cars_data |>
  group_by(offense_type) |>
  summarise(fatalities = sum(total_fatalities, na.rm = TRUE), .groups = "drop") |>
  arrange(desc(fatalities)) |>
  filter(fatalities>0) |>
  hchart("column", hcaes(x = offense_type, y = fatalities)) |>
  hc_title(text = "Fatalities by Offense Type",  align = "center") |>
  hc_chart(inverted = TRUE) |>
   hc_xAxis(title = NULL, labels = list(enabled = TRUE)) |>
  hc_yAxis(title = list(text = "Fatalities")) |>
  hc_plotOptions(column = list(dataLabels = list(enabled = TRUE, formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }")),
                               color = "#e74c3c")) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_legend(enabled = FALSE)

```

### Column {width="20%"}

```{r}
#| title: In-Out Vehicle

injuries <- highchart() |>
  hc_chart(type = "pie", plotBackgroundColor = NULL, plotBorderWidth = NULL, plotShadow = FALSE) |>
  hc_tooltip(pointFormat = '{point.name}: <b>{point.percentage:.1f}%</b>') |>
  hc_title(text = "Injuries", align = "center") |>
  hc_plotOptions(pie = list(pointPadding = 0.04,
                            groupPadding = 0.04,
                            innerSize = '50%',  # Creates the donuts hole
                            startAngle = 0,
                            endAngle = 360,
                            dataLabels = list(enabled = TRUE, 
                                              format = '{point.name}: {point.percentage:.1f}%')
                          )) |>
  hc_legend(enabled = FALSE) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_add_series(
    name = "Total",
    data = list_parse2(
       cars_data |>
        filter(!is.na(total_injuries) & total_injuries > 0) |>
        group_by(in_out_vehicle) |>
        summarise(total_accidents = n())
    )
  )

fatalities <- highchart() |>
  hc_chart(type = "pie", plotBackgroundColor = NULL, plotBorderWidth = NULL, plotShadow = FALSE) |>
  hc_tooltip(pointFormat = '{point.name}: <b>{point.percentage:.1f}%</b>') |>
  hc_title(text = "Fatalities", align = "center") |>
  hc_plotOptions(pie = list(pointPadding = 0.04,
                            groupPadding = 0.04,
                            innerSize = '50%',  # Creates the donuts hole
                            startAngle = 0,
                            endAngle = 360,
                            dataLabels = list(enabled = TRUE, 
                                              format = '{point.name}: {point.percentage:.1f}%')
                          )) |>
  hc_legend(enabled = FALSE) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_add_series(
    name = "Total",
    data = list_parse2(
       cars_data |>
        filter(fatal_collision =="Yes") |>
        group_by(in_out_vehicle) |>
        summarise(total_accidents = n())
    )
  )

hw_grid(list(injuries, fatalities), 
  ncol = 1,        
  rowheight = 300)

```

# Traffic Violations

```{r}
#| label: traffic-collasion-values
#| results: hide

collision_summary <-  cars_data %>%
    summarise(
        speed_fatalities = sum(ifelse(violation_speed == "Yes", total_fatalities, 0), na.rm = TRUE),
        too_close_fatalities = sum(ifelse(violation_too_close == "Yes", total_fatalities, 0), na.rm = TRUE),
        aggressive_driving_fatalities = sum(ifelse(violation_aggressive_driving == "Yes", total_fatalities, 0), na.rm = TRUE),
        failure_to_yield_fatalities = sum(ifelse(violation_failure_to_yield == "Yes", total_fatalities, 0), na.rm = TRUE),
        wrong_way_fatalities = sum(ifelse(violation_wrong_way == "Yes", total_fatalities, 0), na.rm = TRUE),
        turning_fatalities = sum(ifelse(violation_turning == "Yes", total_fatalities, 0), na.rm = TRUE),
        traffic_control_fatalities = sum(ifelse(violation_traffic_control_device == "Yes", total_fatalities, 0), na.rm = TRUE),
        crosswalk_fatalities = sum(ifelse(violation_crosswalk == "Yes", total_fatalities, 0), na.rm = TRUE),
        
        speed_injuries = sum(ifelse(violation_speed == "Yes", total_injuries, 0), na.rm = TRUE),
        too_close_injuries = sum(ifelse(violation_too_close == "Yes", total_injuries, 0), na.rm = TRUE),
        aggressive_driving_injuries = sum(ifelse(violation_aggressive_driving == "Yes", total_injuries, 0), na.rm = TRUE),
        failure_to_yield_injuries = sum(ifelse(violation_failure_to_yield == "Yes", total_injuries, 0), na.rm = TRUE),
        wrong_way_injuries = sum(ifelse(violation_wrong_way == "Yes", total_injuries, 0), na.rm = TRUE),
        turning_injuries = sum(ifelse(violation_turning == "Yes", total_injuries, 0), na.rm = TRUE),
        traffic_control_injuries = sum(ifelse(violation_traffic_control_device == "Yes", total_injuries, 0), na.rm = TRUE),
        crosswalk_injuries = sum(ifelse(violation_crosswalk == "Yes", total_injuries, 0), na.rm = TRUE),
        
        speed_collisions = sum(violation_speed == "Yes", na.rm = TRUE),
        too_close_collisions = sum(violation_too_close == "Yes", na.rm = TRUE),
        aggressive_driving_collisions = sum(violation_aggressive_driving == "Yes", na.rm = TRUE),
        failure_to_yield_collisions = sum(violation_failure_to_yield == "Yes", na.rm = TRUE),
        wrong_way_collisions = sum(violation_wrong_way == "Yes", na.rm = TRUE),
        turning_collisions = sum(violation_turning == "Yes", na.rm = TRUE),
        traffic_control_collisions = sum(violation_traffic_control_device == "Yes", na.rm = TRUE),
        crosswalk_collisions = sum(violation_crosswalk == "Yes", na.rm = TRUE),
        .groups = "drop"
    ) %>%
    pivot_longer(
        cols = everything(),
        names_to = c("violation", "metric"),
        names_pattern = "(.*?)_(fatalities|injuries|collisions)"
    ) %>%
    arrange(desc(value),metric)

```
## Row {height="100%"}

### Column {width="50%"} {.tabset}

```{r}
#| title: Injury Severity

cars_data |>
  group_by(injury_severity) |>
  summarise(total_count = n(), .groups = "drop") |>
  mutate(percentage = (total_count / sum(total_count)) * 100) |>
  arrange(desc(percentage)) |>
  hchart("column", hcaes(x = injury_severity, y = percentage)) |>
  hc_title(text = "Collisions By Injuriy Severity", align = "center") |>
  hc_tooltip(pointFormat = "{series.name}: <b>{point.y:.1f}%</b>") |>
  hc_xAxis(title = NULL, labels = list(enabled = TRUE)) |>
  hc_plotOptions(column = list(dataLabels = list(enabled = TRUE, format = '{point.y:.1f}%'),
                               color = "#3498db")) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_legend(enabled = FALSE)

```

```{r}
#| title: Offence Type

cars_data |>
  group_by(offense_type) |>
  summarise(total_count = n(), .groups = "drop") |>
  mutate(percentage = (total_count / sum(total_count)) * 100) |>
  arrange(desc(percentage)) |>
  hchart("column", hcaes(x = offense_type, y = percentage)) |>
  hc_title(text = "Collisions By Offense Type", align = "center") |>
  hc_tooltip(pointFormat = "{series.name}: <b>{point.y:.1f}%</b>") |>
  hc_xAxis(title = NULL, labels = list(enabled = TRUE)) |>
  hc_plotOptions(column = list(dataLabels = list(enabled = TRUE, format = '{point.y:.1f}%'),
                               color = "#3498db")) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_legend(enabled = FALSE)
```

### Column {width="50%"} {.tabset}

```{r}
#| title: Overall

collision_summary |>
    hchart(
        type = "column",
        hcaes(x = violation, y = value, group = metric),
        # stacking = "normal",
        color = c("#3498db", "#e74c3c", "#2ecc71")
    ) %>%
    hc_title(text = "Car Collisions, Injuries, Fatalities by Violation Type", align = "center") %>%
    hc_plotOptions(
        series = list(
            dataLabels = list(
                enabled = TRUE,
                formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }"),
                style = list(fontSize = "10px")
            )
        )
    ) %>%
    hc_xAxis(
        title = NULL,
        labels = list(
            rotation = -45,
            style = list(fontSize = "12px")
        )
    ) %>%
    hc_yAxis(
        title = list(text = "Count"),
        labels = list(
            style = list(fontSize = "12px")
        )
    ) %>%
    hc_add_theme(hc_theme_smpl()) %>%
    hc_legend(
        enabled = TRUE,
        layout = "horizontal",
        align = "center",
        verticalAlign = "bottom",
        itemStyle = list(fontSize = "10px")
    )
```

```{r}
#| title: Collisions

cars_data |>
  filter(!year %in% c(2017, 2024)) |>
  group_by(year) |>
  summarise(
    speed = sum(violation_speed == "Yes", na.rm = TRUE),
    too_close = sum(violation_too_close == "Yes", na.rm = TRUE),
    aggressive_driving = sum(violation_aggressive_driving == "Yes", na.rm = TRUE),
    failure_to_yield = sum(violation_failure_to_yield == "Yes", na.rm = TRUE),
    wrong_way = sum(violation_wrong_way == "Yes", na.rm = TRUE),
    turning = sum(violation_turning == "Yes", na.rm = TRUE),
    traffic_control = sum(violation_traffic_control_device == "Yes", na.rm = TRUE),
    crosswalk = sum(violation_crosswalk == "Yes", na.rm = TRUE), .groups = "drop" ) |>
  pivot_longer(
    cols = c(speed, too_close, aggressive_driving, failure_to_yield, wrong_way, turning, traffic_control, crosswalk),
    names_to = "metric",
    values_to = "count"
  ) |>
  filter(count > 0) |>
  arrange(year) |>
  hchart(
    type = "bar",
    hcaes(x = year, y = count, group = metric)
  ) |>
  hc_title(text = "Car Collisions (Violations)",  align = "center") |>
  hc_plotOptions(
    series = list(
      stacking = "normal",
      dataLabels = list(
        enabled = TRUE, 
        formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }"), 
        style = list(fontSize = "10px")  # Reduced font size for data labels
      )
    )
  ) |>
  hc_xAxis(
    categories = unique(cars_data$year[!cars_data$year %in% c(2017, 2024)]),
    title = NULL,
    labels = list(
      rotation = 0,
      style = list(fontSize = "12px")
    )
  ) |>
  hc_yAxis(
    title = list(text = "Collisions"),
    labels = list(
      style = list(fontSize = "12px")
    )
  ) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_legend(
    enabled = TRUE,
    layout = "horizontal",
    align = "center",
    verticalAlign = "bottom",
    itemStyle = list(fontSize = "10px")
  )
```

```{r}
#| title: Injuries

cars_data |>
  filter(!year %in% c(2017, 2024)) |>
  group_by(year) |>
  summarise(
    speed = sum(ifelse(violation_speed == "Yes", total_injuries, 0), na.rm = TRUE),
    too_close = sum(ifelse(violation_too_close == "Yes", total_injuries, 0), na.rm = TRUE),
    aggressive_driving = sum(ifelse(violation_aggressive_driving == "Yes", total_injuries, 0), na.rm = TRUE),
    failure_to_yield = sum(ifelse(violation_failure_to_yield == "Yes", total_injuries, 0), na.rm = TRUE),
    wrong_way = sum(ifelse(violation_wrong_way == "Yes", total_injuries, 0), na.rm = TRUE),
    turning = sum(ifelse(violation_turning == "Yes", total_injuries, 0), na.rm = TRUE),
    traffic_control = sum(ifelse(violation_traffic_control_device == "Yes", total_injuries, 0), na.rm = TRUE),
    crosswalk = sum(ifelse(violation_crosswalk == "Yes", total_injuries, 0), na.rm = TRUE),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = c(speed, too_close, aggressive_driving, failure_to_yield, wrong_way, turning, traffic_control, crosswalk),
    names_to = "metric",
    values_to = "count"
  ) |>
  filter(count > 0) |>
  arrange(year) |>
  hchart(
    type = "bar",
    hcaes(x = year, y = count, group = metric) # Swap x and y mapping
  ) |>
  hc_title(text = "Car Collisions Injuries (Violations)",  align = "center") |>
  hc_plotOptions(
    series = list(
      stacking = "normal",
      dataLabels = list(
        enabled = TRUE, 
        formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }"), 
        style = list(fontSize = "10px")  # Reduced font size for data labels
      )
    )
  ) |>
  hc_xAxis(
    categories = unique(cars_data$year[!cars_data$year %in% c(2017, 2024)]),
    title = NULL,
    labels = list(
      rotation = 0,
      style = list(fontSize = "12px")
    )
  ) |>
  hc_yAxis(
    title = list(text = "Injuries"), # Y-axis title
    labels = list(
      style = list(fontSize = "12px") # Adjust font size
    )
  ) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_legend(
    enabled = TRUE, # Show legend
    layout = "horizontal", # Horizontal legend layout
    align = "center", # Align legend to center
    verticalAlign = "bottom", # Align legend to bottom
    itemStyle = list(fontSize = "10px") # Adjust font size of legend items (smaller)
  )

```

```{r}
#| title: Fatalities

cars_data |>
  filter(!year %in% c(2017, 2024)) |>
  group_by(year) |>
  summarise(
    speed = sum(ifelse(violation_speed == "Yes", total_fatalities, 0), na.rm = TRUE),
    too_close = sum(ifelse(violation_too_close == "Yes", total_fatalities, 0), na.rm = TRUE),
    aggressive_driving = sum(ifelse(violation_aggressive_driving == "Yes", total_fatalities, 0), na.rm = TRUE),
    failure_to_yield = sum(ifelse(violation_failure_to_yield == "Yes", total_fatalities, 0), na.rm = TRUE),
    wrong_way = sum(ifelse(violation_wrong_way == "Yes", total_fatalities, 0), na.rm = TRUE),
    turning = sum(ifelse(violation_turning == "Yes", total_fatalities, 0), na.rm = TRUE),
    traffic_control = sum(ifelse(violation_traffic_control_device == "Yes", total_fatalities, 0), na.rm = TRUE),
    crosswalk = sum(ifelse(violation_crosswalk == "Yes", total_fatalities, 0), na.rm = TRUE),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = c(speed, too_close, aggressive_driving, failure_to_yield, wrong_way, turning, traffic_control, crosswalk),
    names_to = "metric",
    values_to = "count"
  ) |>
  filter(count > 0) |>
  arrange(year) |>
  hchart(
    type = "bar",
    hcaes(x = year, y = count, group = metric) # Swap x and y mapping
  ) |>
  hc_title(text = "Car Collisions Fatalities (Violations)",  align = "center") |>
  hc_plotOptions(
    series = list(
      stacking = "normal",
      dataLabels = list(
        enabled = TRUE, 
        formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }"), 
        style = list(fontSize = "10px")  # Reduced font size for data labels
      )
    )
  ) |>
  hc_xAxis(
    categories = unique(cars_data$year[!cars_data$year %in% c(2017, 2024)]),
    title = NULL,
    labels = list(
      rotation = 0,
      style = list(fontSize = "12px")
    )
  ) |>
  hc_yAxis(
    title = list(text = "Fatalities"), # Y-axis title
    labels = list(
      style = list(fontSize = "12px") # Adjust font size
    )
  ) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_legend(
    enabled = TRUE, # Show legend
    layout = "horizontal", # Horizontal legend layout
    align = "center", # Align legend to center
    verticalAlign = "bottom", # Align legend to bottom
    itemStyle = list(fontSize = "10px") # Adjust font size of legend items (smaller)
  )
```

# Collision Occarance

## Row {width="0%"}

### Column {width="40%"} {.tabset}

```{r}
#| title: Yearly

cars_data |>
  filter(!year %in% c(2017, 2024)) |>
  group_by(year) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE),
    injuries = sum(total_injuries, na.rm = TRUE),
    accidents = n(),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = c(fatalities, injuries, accidents),
    names_to = "metric", 
    values_to = "count"
  ) |>
  hchart("line", hcaes(x = year, y = count, group = metric)) |>
  hc_title(text = "Car Collisions Trends (Yearly)", align = "center") |>
  hc_xAxis(title = NULL) |>
  hc_yAxis(title = list(text = "Count")) |>
  hc_legend(
    enabled = TRUE,
    align = 'center',
    verticalAlign = 'bottom',
    layout = 'horizontal'
  ) |>
  hc_colors(c("#3498db", "#e74c3c", "#2ecc71")) |>
  hc_plotOptions(
    # Customizing line styles and markers
    series = list(lineWidth = 3,
                  marker = list(enabled = TRUE,  # Enable markers
                                fillColor = '#FFFFFF',  # White fill
                                lineWidth = 2,
                                lineColor = NULL))) |>
    hc_responsive(rules = list(list(condition = list(maxWidth = 500),
                                    chartOptions = list(legend = list(layout = 'horizontal',
                                                                      align = 'center',
                                                                      verticalAlign = 'bottom'))))) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_exporting(enabled = FALSE)  # Enable exporting if needed

```

```{r}
#| title: Monthly

cars_data |>
  group_by(month, month_no) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE),
    injuries = sum(total_injuries, na.rm = TRUE),
    accidents = n(),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = c(fatalities, injuries, accidents),
    names_to = "metric", 
    values_to = "count"
  ) |>
  arrange(month_no) |>
  hchart("line", hcaes(x = month, y = count, group = metric)) |>
  hc_title(text = "Car Collisions Trends (Monthly)", align = "center") |>
  hc_xAxis(title = NULL) |>
  hc_yAxis(title = list(text = "Count")) |>
  hc_legend(
    enabled = TRUE,
    align = 'center',
    verticalAlign = 'bottom',
    layout = 'horizontal'
  ) |>
  hc_colors(c("#3498db", "#e74c3c", "#2ecc71")) |>
  hc_plotOptions(
    # Customizing line styles and markers
    series = list(lineWidth = 3,
                  marker = list(enabled = TRUE,  # Enable markers
                                fillColor = '#FFFFFF',  # White fill
                                lineWidth = 2,
                                lineColor = NULL))) |>
    hc_responsive(rules = list(list(condition = list(maxWidth = 500),
                                    chartOptions = list(legend = list(layout = 'horizontal',
                                                                      align = 'center',
                                                                      verticalAlign = 'bottom'))))) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_exporting(enabled = FALSE)  # Enable exporting if needed

```

```{r}
#| title: Weekly
 
weekday_order <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")

cars_data |>
  group_by(day) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE),
    injuries = sum(total_injuries, na.rm = TRUE),
    accidents = n()
  ) |>
  pivot_longer(
    cols = c(fatalities, injuries, accidents),
    names_to = "metric", 
    values_to = "count"
  ) |>
  arrange(factor(day, levels = weekday_order)) |>
  hchart("line", hcaes(x = day, y = count, group = metric)) |>
  hc_title(text = "Car Collisions Trends (Weekly)", align = "center") |>
  hc_xAxis(title = NULL) |>
  hc_yAxis(title = list(text = "Total Count")) |>
  hc_legend(
    enabled = TRUE,
    align = 'center',
    verticalAlign = 'bottom',
    layout = 'horizontal'
  ) |>
  hc_colors(c("#3498db", "#e74c3c", "#2ecc71")) |>
  hc_plotOptions(
    # Customizing line styles and markers
    series = list(lineWidth = 3,
                  marker = list(enabled = TRUE,  # Enable markers
                                fillColor = '#FFFFFF',  # White fill
                                lineWidth = 2,
                                lineColor = NULL))) |>
    hc_responsive(rules = list(list(condition = list(maxWidth = 500),
                                    chartOptions = list(legend = list(layout = 'horizontal',
                                                                      align = 'center',
                                                                      verticalAlign = 'bottom'))))) |>
    hc_add_theme(hc_theme_smpl()) |>
    hc_exporting(enabled = FALSE)  # Enable exporting if needed

```

```{r}
#| title: Time

cars_data |>
  group_by(hour,time_occu) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE),
    injuries = sum(total_injuries, na.rm = TRUE),
    accidents = n(),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = c(fatalities, injuries, accidents),
    names_to = "metric", 
    values_to = "count"
  ) |>
  arrange(time_occu) |>
  hchart("line", hcaes(x = hour, y = count, group = metric)) |>
  hc_title(text = "Collisions Trends (Hourly)", align = "center") |>
  hc_xAxis(title = NULL) |> 
  hc_yAxis(title = list(text = "Total Count")) |>
  hc_legend(
    enabled = TRUE,
    align = 'center',
    verticalAlign = 'bottom',
    layout = 'horizontal'
  ) |>
  hc_colors(c("#3498db", "#e74c3c", "#2ecc71")) |>
  hc_plotOptions(
    # Customizing line styles and markers
    series = list(lineWidth = 3,
                  marker = list(enabled = TRUE,  # Enable markers
                                fillColor = '#FFFFFF',  # White fill
                                lineWidth = 2,
                                lineColor = NULL))) |>
    hc_responsive(rules = list(list(condition = list(maxWidth = 500),
                                    chartOptions = list(legend = list(layout = 'horizontal',
                                                                      align = 'center',
                                                                      verticalAlign = 'bottom'))))) |>
     hc_add_theme(hc_theme_smpl()) |>
    hc_exporting(enabled = FALSE)  # Enable exporting if needed

```

### Column {width="60%"}

```{r}
#| title: Car Collisions Over Time

# Convert month column to character to prevent highcharter from treating it as a timestamp
month_summary <- cars_data |>
  filter(!year %in% c(2017,2024)) |>
  group_by(year, month, month_no) |>
  summarise(accidents = n(), .groups = "drop") |>
  pivot_wider(
    names_from = year,
    values_from = accidents
  ) |>
  mutate(month = as.character(month)) |>
  arrange(month_no) |>
  select(-month_no)

# Create the highchart object
month_chart <- highchart() |>
  hc_chart(type = "line") |>
  hc_xAxis(categories = month_summary$month) |>
  hc_yAxis(title = list(text = "Collisions"))

# Add series for each year
for (i in 2:ncol(month_summary)) {  # Start from the second column, assuming the first column is `month`
  month_chart <- month_chart |> hc_add_series(
    name = names(month_summary)[i],  # Use the column name as the series name
    data = month_summary[[i]],  # Use the column data as series data
    dashStyle = "Dash"  # Set the line style to dashed
  )
}

# Print the chart
month_chart

```

```{r}
#| title: Car Collisions by Day and Hour

colors <- c("#FFFFFF", "#3070B3", "#FFA07A", "#FF4500")

day_summary <- cars_data |>
  filter(year != 2017, !is.na(time_occu)) |> # Filter out 2017 and NA in time
  group_by(day, time_occu) |>
  summarise(accidents = n(), .groups = "drop") |>
  mutate(
    time_occu = as.character(time_occu),
    time_occu = str_pad(time_occu, width = 4, pad = "0"),
    hour = as.numeric(time_occu) / 100,
    day_index = as.numeric(factor(day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))) - 1
  ) |>
  filter(!is.na(hour)) 

highchart() |>
  hc_chart(type = "heatmap", zoomType = "xy") |>
  hc_xAxis(categories = formatC(0:23, width = 2, format = "d", flag = "0"), title = NULL) |>
  hc_yAxis(categories = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"), title = "Day" , reversed = TRUE) |>
  hc_colorAxis(min = 0, stops = color_stops(colors = colors)) |>
  hc_legend(align = "right", layout = "vertical", margin = 0, verticalAlign = "top", y = 25, symbolHeight = 280) |>
  hc_add_series(
    data = day_summary |>
      mutate(x = hour, y = day_index, value = accidents) |>
      select(x, y, value) |>
      list_parse(),
    name = "Accidents",
    borderWidth = 0.5,
    borderColor = '#FFFFFF'
  ) |>
  hc_tooltip(
    useHTML = TRUE,
    formatter = JS("function() {
      return '<b>' + this.series.yAxis.categories[this.point.y] + ', ' + this.series.xAxis.categories[this.point.x] + ':00' + '</b><br>' +
             '<b>' + this.point.value + ' accidents</b>';
    }")
  )

```

# Collision Reason

## Row {height="50%"}

### Column {width="60%"}

```{r}
#| title: Injury Severity

cars_data |>
  group_by(injury_severity) |>
  summarise(total_count = n(), .groups = "drop") |>
  mutate(percentage = (total_count / sum(total_count)) * 100) |>
  arrange(desc(percentage)) |>
  hchart("column", hcaes(x = injury_severity, y = percentage)) |>
  hc_tooltip(pointFormat = "{series.name}: <b>{point.y:.1f}%</b>") |>
  hc_chart(inverted = TRUE) |>
  hc_xAxis(title = NULL, labels = list(enabled = TRUE)) |>
  hc_yAxis(title = list(text = "Collisons")) |>
  hc_plotOptions(column = list(dataLabels = list(enabled = TRUE, format = '{point.y:.1f}%'),
                               color = "#3498db")) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_legend(enabled = FALSE)
```

### Column {width="20%"}

```{r}
#| title: Impaired Driver-Involved

highchart() |>
  hc_chart(type = "pie", plotBackgroundColor = NULL, plotBorderWidth = NULL, plotShadow = FALSE) |>
  hc_tooltip(pointFormat = '{point.name}: <b>{point.percentage:.1f}%</b>') |>
  hc_plotOptions(pie = list(pointPadding = 0.04,
                            groupPadding = 0.04,
                            innerSize = '50%',  # Creates the donuts hole
                            startAngle = 0,
                            endAngle = 360,
                            dataLabels = list(enabled = TRUE, 
                                              format = '{point.name}: {point.percentage:.1f}%')
                          )) |>
  hc_colors(c("#3498db", "#e74c3c")) |> 
  hc_legend(enabled = FALSE) |> 
  hc_add_theme(hc_theme_smpl()) |>
  hc_add_series(
    name = "Total",
    data = list_parse2(
       cars_data |>
        group_by(operator_impaired) |>
        summarise(total_accidents = n(), .groups = "drop") 
    )
  )

```

### Column {width="20%"}

```{r}
#| title: Distracted Driver-Involved

highchart() |>
  hc_chart(type = "pie", plotBackgroundColor = NULL, plotBorderWidth = NULL, plotShadow = FALSE) |>
  hc_tooltip(pointFormat = '{point.name}: <b>{point.percentage:.1f}%</b>') |>
  hc_plotOptions(pie = list(pointPadding = 0.04,
                            groupPadding = 0.04,
                            innerSize = '50%',  # Creates the donuts hole
                            startAngle = 0,
                            endAngle = 360,
                            dataLabels = list(enabled = TRUE, 
                                              format = '{point.name}: {point.percentage:.1f}%')
                          )) |>
  hc_legend(enabled = FALSE) |>
  hc_colors(c("#3498db", "#e74c3c")) |> 
  hc_add_theme(hc_theme_smpl()) |>
  hc_add_series(
    name = "Total",
    data = list_parse2(
       cars_data |>
        group_by(operator_distracted) |>
        summarise(total_accidents = n(), .groups = "drop") 
    )
  )

```

## Row {height="50%"}

### Column {width="60%"} {.tabset}

```{r}
#| title: Accidents by Collision Manner

cars_data |>
  mutate(collision_manner = sub(" \\(.*", "", collision_manner)) |>
  group_by(collision_manner) |>
  summarise(accidents = n(), .groups = "drop") |>
  mutate(collision_manner = stringr::str_wrap(collision_manner, width = 5)) |>
  arrange(desc(accidents)) |>
  filter(collision_manner!="") |>
  hchart("column", hcaes(x = collision_manner, y = accidents)) |>
  hc_colors(c("#3498db")) |> 
  hc_xAxis(
    title = list(text = "Collision Manner"),
    labels = list(
      rotation = 0,
      align = "center",
      style = list(
        whiteSpace = 'normal',
        textOverflow = 'none',
        width = '8px'))) |>
  hc_yAxis(title = list(text = "Number of Accidents (K)")) |>
  hc_tooltip(
      pointFormat = "<b>{point.y}</b>",
      formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }")) |>
  hc_plotOptions(column = list(
    pointPadding = 0.02,
    groupPadding = 0.02,
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }"),
      fontSize = '1px'
    ))) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_legend(enabled = FALSE)

```

```{r}
#| title: Accidents by Collision Type

cars_data |>
  group_by(collision_type) |>
  summarise(accidents = n(), .groups = "drop") |>
  mutate(collision_type = stringr::str_wrap(collision_type, width = 10)) |>
  arrange(desc(accidents)) |>
  filter(collision_type!="", accidents>20) |>
  hchart("column", hcaes(x = collision_type, y = accidents)) |>
  hc_colors(c("#3498db")) |> 
  hc_xAxis(
    title = list(text = "Collision Type"),
    labels = list(
      rotation = 0,
      align = "center",
      style = list(
        whiteSpace = 'normal',
        textOverflow = 'none',
        width = '8px'))) |>
  hc_yAxis(title = list(text = "Number of Accidents")) |>
  hc_tooltip(
    pointFormat = "<b>{point.y}</b>",
    formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }")
  ) |>
  hc_plotOptions(column = list(
    pointPadding = 0.02,
    groupPadding = 0.02,
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }"),
      fontSize = '1px'
    ))) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_legend(enabled = FALSE)

```

### Column {width="20%"}

```{r}
#| title: Speeding Driver-Involved

highchart() |>
  hc_chart(type = "pie", plotBackgroundColor = NULL, plotBorderWidth = NULL, plotShadow = FALSE) |>
  hc_tooltip(pointFormat = '{point.name}: <b>{point.percentage:.1f}%</b>') |>
  hc_plotOptions(pie = list(pointPadding = 0.04,
                            groupPadding = 0.04,
                            innerSize = '50%',  # Creates the donuts hole
                            startAngle = 0,
                            endAngle = 360,
                            dataLabels = list(enabled = TRUE, 
                                              format = '{point.name}: {point.percentage:.1f}%')
                          )) |>
  hc_legend(enabled = FALSE) |>
  hc_colors(c("#3498db", "#e74c3c")) |> 
  hc_add_theme(hc_theme_smpl()) |>
  hc_add_series(
    name = "Total",
    data = list_parse2(
       cars_data |>
        group_by(violation_speed) |>
        summarise(total_accidents = n(), .groups = "drop") 
    )
  )

```

### Column {width="20%"}

```{r}
#| title: Intersection Related

highchart() |>
  hc_chart(type = "pie", plotBackgroundColor = NULL, plotBorderWidth = NULL, plotShadow = FALSE) |>
  hc_tooltip(pointFormat = '{point.name}: <b>{point.percentage:.1f}%</b>') |>
  hc_plotOptions(pie = list(pointPadding = 0.04,
                            groupPadding = 0.04,
                            innerSize = '50%',  # Creates the donuts hole
                            startAngle = 0,
                            endAngle = 360,
                            dataLabels = list(enabled = TRUE, 
                                              format = '{point.name}: {point.percentage:.1f}%')
                          )) |>
  hc_legend(enabled = FALSE) |>
  hc_colors(c("#3498db", "#e74c3c")) |> 
  hc_add_theme(hc_theme_smpl()) |>
  hc_add_series(
    name = "Total",
    data = list_parse2(
       cars_data |>
        group_by(intersection_related) |>
        summarise(total_accidents = n(), .groups = "drop") 
    )
  )

```

# Collision Location

## Row {heigt="100%"}

### Column {width="50%"} {.tabset}

```{r}
#| title: Division

cars_data |>
  group_by(division) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE),
    injuries = sum(total_injuries, na.rm = TRUE),
    accidents = n(),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = c(fatalities, injuries, accidents),
    names_to = "metric", 
    values_to = "count"
  ) |> 
  arrange(desc(count)) |>
  hchart("column", hcaes(x = division, y = count, group = metric)) |>
  hc_colors(c("#3498db", "#e74c3c", "#2ecc71")) |>
  hc_title(text = "Car Collisions By Division", align = "center") |>
  hc_tooltip(
    pointFormat = "{point.name}:: <b>{point.y}</b>",
    formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }")) |>
  hc_plotOptions(column = list(pointPadding = 0.04,
                            groupPadding = 0.04,
                            dataLabels = list(enabled = TRUE, 
                                               formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }")))) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_yAxis(title = list(text = "Number of Accidents")) |>
  hc_xAxis(title = list(text = "Division")) |>
  hc_legend(
    enabled = TRUE,
    align = 'center',
    verticalAlign = 'bottom',
    layout = 'horizontal' )

```

```{r}
#| title: Ward

cars_data |>
  group_by(ward) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE),
    injuries = sum(total_injuries, na.rm = TRUE),
    accidents = n(),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = c(fatalities, injuries, accidents),
    names_to = "metric", 
    values_to = "count"
  ) |>
  arrange(desc(count)) |>
  hchart("column", hcaes(x = ward, y = count, group = metric)) |>
  hc_colors(c("#3498db", "#e74c3c", "#2ecc71")) |>
  hc_title(text = "Car Collisions By Ward", align = "center") |>
  hc_tooltip(
    pointFormat = "{point.name}:: <b>{point.y}</b>",
    formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }")) |>
  hc_plotOptions(column = list(pointPadding = 0.04,
                            groupPadding = 0.04,
                            dataLabels = list(enabled = TRUE, 
                                               formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }")))) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_yAxis(title = list(text = "Number of Accidents")) |>
  hc_xAxis(title = list(text = "Ward")) |>
  hc_legend(
    enabled = TRUE,
    align = 'center',
    verticalAlign = 'bottom',
    layout = 'horizontal' )

```

```{r}
#| title: Neighbourhood

cars_data |>
  filter(collision_neighborhd!='Uknw') |>
  group_by(collision_neighborhd) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE),
    injuries = sum(total_injuries, na.rm = TRUE),
    accidents = n(),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = c(fatalities, injuries, accidents),
    names_to = "metric", 
    values_to = "count"
  ) |>
  arrange(desc(count)) |>
  head(15) |>
  hchart("column", hcaes(x = collision_neighborhd, y = count, group = metric)) |>
  hc_colors(c("#3498db", "#e74c3c", "#2ecc71")) |>
  hc_title(text = "Car Collisions By Neighbourhood", align = "center") |>
  hc_tooltip(
    pointFormat = "{point.name}:: <b>{point.y}</b>",
    formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }")) |>
  hc_plotOptions(column = list(pointPadding = 0.04,
                            groupPadding = 0.04,
                            dataLabels = list(enabled = TRUE, 
                                               formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }")))) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_yAxis(title = list(text = "Number of Accidents")) |>
  hc_xAxis(title = list(text = "NeighbourHood")) |>
  hc_legend(
    enabled = TRUE,
    align = 'center',
    verticalAlign = 'bottom',
    layout = 'horizontal' )

```

```{r}
#| title: Location

cars_data |>
  filter(accident_location!='Unknown') |>
  group_by(accident_location) |>
  summarise(
    fatalities = sum(total_fatalities, na.rm = TRUE),
    injuries = sum(total_injuries, na.rm = TRUE),
    accidents = n(),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = c(fatalities, injuries, accidents),
    names_to = "metric", 
    values_to = "count"
  ) |>
  arrange(desc(count)) |>
  head(15) |>
  hchart("column", hcaes(x = accident_location, y = count, group = metric)) |>
  hc_colors(c("#3498db", "#e74c3c", "#2ecc71")) |>
  hc_title(text = "Car Collisions By Location", align = "center") |>
  hc_tooltip(
    pointFormat = "{point.name}:: <b>{point.y}</b>",
    formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }")) |>
  hc_plotOptions(column = list(pointPadding = 0.04,
                            groupPadding = 0.04,
                            dataLabels = list(enabled = TRUE, 
                                               formatter = JS("function() { return Highcharts.numberFormat(this.y, 0, '.', ','); }")))) |>
  hc_add_theme(hc_theme_smpl()) |>
  hc_yAxis(title = list(text = "Number of Accidents")) |>
  hc_xAxis(title = list(text = "Accident Location")) |>
  hc_legend(
    enabled = TRUE,
    align = 'center',
    verticalAlign = 'bottom',
    layout = 'horizontal' )

```

### Column {width="50%"}

```{r}

#| title: Map
# Segment divisions based on accident categories
# Assuming you have your "cars_data" data frame loaded

# Filter data for each accident type
fatal_accidents <- cars_data |>
  filter(!is.na(latitude), !is.na(longitude)) |>
  filter(offense_type == "Fatal Accidents")

dui_accidents <- cars_data |>
  filter(!is.na(latitude), !is.na(longitude)) |>
  filter(offense_type == "DUI Accidents")

injury_accidents <- cars_data |>
  filter(!is.na(latitude), !is.na(longitude)) |>
  filter(offense_type == "Injury Accidents")

property_damage_accidents <- cars_data |>
  filter(!is.na(latitude), !is.na(longitude)) |>
  filter(offense_type == "Property Damage Accidents")

non_traffic_accidents <- cars_data |>
  filter(!is.na(latitude), !is.na(longitude)) |>
  filter(offense_type == "Non-Traffic Accidents")

other_vehicle_accidents <- cars_data |>
  filter(!is.na(latitude), !is.na(longitude)) |>
  filter(offense_type == "Other Vehicle Accidents")

# Define custom icons (replace filenames with your icon paths)
fatal_icon <- makeIcon("images/fatal.png",  iconWidth = 30, iconHeight = 30)
dui_icon <- makeIcon("images/dui.png",  iconWidth = 30, iconHeight = 30)
injury_icon <- makeIcon("images/injury.png", iconWidth = 30, iconHeight = 30)
property_icon <- makeIcon("images/property.png",  iconWidth = 30, iconHeight = 30)
non_traffic_icon <- makeIcon("images/non_traffic.png",  iconWidth = 30, iconHeight = 30)
other_icon <- makeIcon("images/other_vehicle.png", iconWidth = 30, iconHeight = 30)

# Define the bounding box for Tucson
tucson_bounds <- list(
  c(32.1313, -111.0788),  # Southwest corner
  c(32.4998, -110.7337)   # Northeast corner
)

uofa_bounds <- list(
  c(32.225, -110.96),  # Southwest corner
  c(32.235, -110.945)   # Northeast corner
)

# Create leaflet map with custom icons
combined_map <- leaflet(options = leafletOptions(maxBounds = tucson_bounds)) |>
  addTiles() |>
  addRectangles(
    lng1 = uofa_bounds[[1]][[2]], lat1 = uofa_bounds[[1]][[1]],
    lng2 = uofa_bounds[[2]][[2]], lat2 = uofa_bounds[[2]][[1]],
    fillColor = "darkred",
    fillOpacity = 0.5,
    color = "darkred",
    weight = 2
  ) |>
  addMarkers(data = fatal_accidents, clusterOptions = markerClusterOptions(), 
             icon = fatal_icon,
             popup = ~paste("Offense Type:", offense_type),
             label = ~offense_type,
             labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px")),
             lng = ~longitude,
             lat = ~latitude) |>
  addMarkers(data = dui_accidents, clusterOptions = markerClusterOptions(), 
             icon = dui_icon,
             popup = ~paste("Offense Type:", offense_type),
             label = ~offense_type,
             labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px")),
             lng = ~longitude,
             lat = ~latitude) |>
  addMarkers(data = injury_accidents, clusterOptions = markerClusterOptions(), 
             icon = injury_icon,
             popup = ~paste("Offense Type:", offense_type),
             label = ~offense_type,
             labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px")),
             lng = ~longitude,
             lat = ~latitude) |>
  addMarkers(data = property_damage_accidents, clusterOptions = markerClusterOptions(), 
             icon = property_icon,
             popup = ~paste("Offense Type:", offense_type),
             label = ~offense_type,
             labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px")),
             lng = ~longitude,
             lat = ~latitude) |>
  addMarkers(data = non_traffic_accidents, clusterOptions = markerClusterOptions(), 
             icon = non_traffic_icon,
             popup = ~paste("Offense Type:", offense_type),
             label = ~offense_type,
             labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px")),
             lng = ~longitude,
             lat = ~latitude) |>
  addMarkers(data = other_vehicle_accidents, clusterOptions = markerClusterOptions(), 
             icon = other_icon,
             popup = ~paste("Offense Type:", offense_type),
             label = ~offense_type,
             labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px")),
             lng = ~longitude,
             lat = ~latitude) |>
  # Fit map to the bounding box for Tucson
  fitBounds(lng1 = tucson_bounds[[1]][[2]], lat1 = tucson_bounds[[1]][[1]], 
            lng2 = tucson_bounds[[2]][[2]], lat2 = tucson_bounds[[2]][[1]])

# Display the map
combined_map

```


